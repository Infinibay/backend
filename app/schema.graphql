# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ApplicationType {
  createdAt: DateTimeISO!
  description: String
  id: ID!
  installCommand: JSONObject!
  name: String!
  os: [String!]!
  parameters: JSONObject
}

input CreateApplicationInputType {
  description: String
  installCommand: JSONObject!
  name: String! = ""
  os: [String!]! = []
  parameters: JSONObject = null
}

input CreateMachineInputType {
  applications: [MachineApplicationInputType!]! = []
  name: String! = ""
  os: MachineOs! = WINDOWS10
  password: String! = ""
  productKey: String
  templateId: String! = ""
  username: String! = ""
}

input CreateUserInputType {
  email: String! = ""
  firstName: String! = ""
  lastName: String! = ""
  password: String! = ""
  passwordConfirmation: String! = ""
  role: UserRole! = USER
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type DepartmentType {
  createdAt: DateTimeISO!
  id: ID!
  internetSpeed: Int
  ipSubnet: String
  name: String!
  totalMachines: Float
}

type DyummyType {
  value: String!
}

type GraphicConfigurationType {
  link: String!
  password: String!
  protocol: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Machine {
  config: JSONObject
  createdAt: DateTimeISO
  department: DepartmentType
  id: ID!
  name: String!
  status: String!
  template: MachineTemplateType
  templateId: String!
  user: UserType
  userId: String!
}

input MachineApplicationInputType {
  applicationId: String! = ""
  machineId: String! = ""
  parameters: JSONObject = null
}

input MachineOrderBy {
  direction: OrderByDirection
  fieldName: MachineOrderByField
}

"""The field to order machines by"""
enum MachineOrderByField {
  CONFIG
  CREATED_AT
  ID
  STATUS
  TEMPLATE_ID
  USER_ID
}

"""The os of the machine"""
enum MachineOs {
  FEDORA
  UBUNTU
  WINDOWS10
  WINDOWS11
}

input MachineTemplateCategoryInputType {
  description: String = null
  name: String! = ""
}

type MachineTemplateCategoryType {
  createdAt: DateTimeISO!
  description: String
  id: ID!
  name: String!
}

input MachineTemplateInputType {
  """The ID of the category for the machine template"""
  categoryId: ID = null

  """The number of cores for the machine"""
  cores: Int! = 0

  """A brief description of the machine template"""
  description: String! = ""

  """The name of the machine template"""
  name: String! = ""

  """The amount of RAM (in GB) for the machine"""
  ram: Int! = 0

  """The storage space (in GB) for the machine"""
  storage: Int! = 0
}

input MachineTemplateOrderBy {
  direction: OrderByDirection
  fieldName: MachineTemplateOrderByField
}

"""The field to order machine templates by"""
enum MachineTemplateOrderByField {
  CORES
  CREATED_AT
  ID
  NAME
  RAM
  STORAGE
}

type MachineTemplateType {
  categoryId: ID
  cores: Int!
  createdAt: DateTimeISO!
  description: String
  id: ID!
  name: String
  ram: Int!
  storage: Int!
}

type Mutation {
  createApplication(input: CreateApplicationInputType!): ApplicationType!
  createDepartment(name: String!): DepartmentType!
  createMachine(input: CreateMachineInputType!): Machine!
  createMachineTemplate(input: MachineTemplateInputType!): MachineTemplateType!
  createMachineTemplateCategory(input: MachineTemplateCategoryInputType!): MachineTemplateCategoryType!
  createUser(input: CreateUserInputType!): UserType!
  deleteApplication(id: String!): Boolean!
  destroyDepartment(id: String!): DepartmentType!
  destroyMachine(id: String!): SuccessType!
  powerOff(id: String!): SuccessType!
  powerOn(id: String!): SuccessType!
  setupNode: DyummyType!
  suspend(id: String!): SuccessType!
  updateApplication(id: String!, input: CreateApplicationInputType!): ApplicationType!
  updateMachineTemplate(id: String!, input: MachineTemplateInputType!): MachineTemplateType!
  updateMachineTemplateCategory(id: String!, input: MachineTemplateCategoryInputType!): MachineTemplateCategoryType!
  updateUser(id: String!, input: UpdateUserInputType!): UserType!
}

enum OrderByDirection {
  ASC
  DESC
}

input PaginationInputType {
  skip: Int = 0
  take: Int = 20
}

type Query {
  application(id: String!): ApplicationType
  applications: [ApplicationType!]!
  checkSetupStatus: DyummyType!
  currentUser: UserType!
  department(id: String!): DepartmentType
  departments: [DepartmentType!]!
  findDepartmentByName(name: String!): DepartmentType
  graphicConnection(id: String!): GraphicConfigurationType
  login(email: String!, password: String!): UserToken!
  machine(id: String!): Machine
  machineTemplate(id: String!): MachineTemplateType
  machineTemplateCategories: [MachineTemplateCategoryType!]!
  machineTemplateCategory(id: String!): MachineTemplateCategoryType
  machineTemplates(orderBy: MachineTemplateOrderBy, pagination: PaginationInputType): [MachineTemplateType!]!
  machines(orderBy: MachineOrderBy, pagination: PaginationInputType): [Machine!]!
  user(id: String!): UserType!
  users(orderBy: UserOrderByInputType, pagination: PaginationInputType): [UserType!]!
}

type SuccessType {
  message: String!
  success: Boolean!
}

input UpdateUserInputType {
  firstName: String = ""
  lastName: String = ""
  password: String = ""
  passwordConfirmation: String = ""
  role: UserRole = USER
}

"""The field to order users by"""
enum UserOrderByField {
  CREATED_AT
  EMAIL
  FIRST_NAME
  ID
  LAST_NAME
  ROLE
  UPDATED_AT
}

input UserOrderByInputType {
  direction: OrderByDirection
  fieldName: UserOrderByField
}

"""The basic roles of users"""
enum UserRole {
  ADMIN
  USER
}

"""Token used to log in"""
type UserToken {
  token: String!
}

"""User model"""
type UserType {
  createdAt: DateTimeISO!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  role: String!
}