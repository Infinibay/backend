# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ApplicationType {
  createdAt: DateTimeISO!
  description: String
  icon: String
  id: ID!
  installCommand: JSONObject!
  name: String!
  os: [String!]!
  parameters: JSONObject
}

input ApplyFirewallTemplateInput {
  machineId: ID!
  template: FirewallTemplate!
}

input BridgeNameInput {
  bridgeName: String! = ""
  networkName: String! = ""
}

type CommandExecutionResponseType {
  message: String!
  response: String
  success: Boolean!
}

"""Generic command execution result"""
type CommandResult {
  """Error message if command failed"""
  error: String

  """Command output"""
  output: String

  """Standard error"""
  stderr: String

  """Standard output"""
  stdout: String

  """Whether the command was successful"""
  success: Boolean!
}

input CreateApplicationInputType {
  description: String
  installCommand: JSONObject!
  name: String! = ""
  os: [String!]! = []
  parameters: JSONObject = null
}

input CreateFilterInput {
  chain: String = "root"
  description: String! = ""
  name: String! = ""
  type: FilterType = GENERIC
}

input CreateFilterRuleInput {
  action: String! = ""
  comment: String
  direction: String! = ""
  dstPortEnd: Int
  dstPortStart: Int
  filterId: String! = ""
  ipVersion: String
  priority: Int! = 0
  protocol: String
  srcPortEnd: Int
  srcPortStart: Int
  state: String
}

input CreateMachineInputType {
  applications: [MachineApplicationInputType!]! = []
  customCores: Int
  customRam: Int
  customStorage: Int
  departmentId: ID = ""
  name: String! = ""
  os: MachineOs! = WINDOWS10
  password: String! = ""
  pciBus: String = null
  productKey: String
  templateId: String
  username: String! = ""
}

input CreateNetworkInput {
  bridgeName: String! = ""
  description: String! = ""
  enableIntraNetworkCommunication: Boolean
  enabledServices: [String!]
  ipConfig: NetworkIpConfigInput
  name: String! = ""
}

input CreateSimplifiedFirewallRuleInput {
  action: String! = "accept"
  description: String
  direction: String! = "in"
  machineId: ID!
  port: String!
  protocol: String! = "tcp"
}

input CreateSnapshotInput {
  description: String
  machineId: String!
  name: String!
}

input CreateUserInputType {
  email: String! = ""
  firstName: String! = ""
  lastName: String! = ""
  password: String! = ""
  passwordConfirmation: String! = ""
  role: UserRole! = USER
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DeleteNetworkInput {
  name: String!
}

input DeleteSnapshotInput {
  machineId: String!
  snapshotName: String!
}

type DepartmentServiceStatus {
  """Unique identifier for the department"""
  departmentId: ID!

  """Name of the department"""
  departmentName: String!

  """Number of VMs in the department with this service enabled"""
  enabledVmCount: Float!

  """Whether the service is enabled for inbound traffic"""
  provideEnabled: Boolean!

  """Unique identifier for the service"""
  serviceId: ID!

  """Name of the service"""
  serviceName: String!

  """Whether the service is enabled for outbound traffic"""
  useEnabled: Boolean!

  """Total number of VMs in the department"""
  vmCount: Float!
}

type DepartmentType {
  createdAt: DateTimeISO!
  id: ID!
  internetSpeed: Int
  ipSubnet: String
  name: String!
  totalMachines: Float
}

type DyummyType {
  value: String!
}

type FWRule {
  action: String!
  comment: String
  createdAt: DateTimeISO
  direction: String!
  dstIpAddr: String
  dstIpMask: String
  dstPortEnd: Int
  dstPortStart: Int
  id: ID!
  ipVersion: String
  priority: Int!
  protocol: String!
  srcIpAddr: String
  srcIpMask: String
  srcMacAddr: String
  srcPortEnd: Int
  srcPortStart: Int
  state: JSONObject
  updatedAt: DateTimeISO
}

"""Type of network filter"""
enum FilterType {
  DEPARTMENT
  GENERIC
  VM
}

"""Predefined firewall template configurations"""
enum FirewallTemplate {
  DATABASE
  DESKTOP
  DEVELOPMENT
  WEB_SERVER
}

type FirewallTemplateInfo {
  description: String!
  name: String!
  rules: [SimplifiedFirewallRule!]!
}

type GPU {
  memory: Float!
  model: String!
  pciBus: String!
  vendor: String!
}

type GenericFilter {
  createdAt: DateTimeISO!
  description: String
  id: ID!
  name: String!
  references: [String!]!
  rules: [FWRule!]
  type: FilterType!
  updatedAt: DateTimeISO!
}

type GlobalServiceStatus {
  """Whether the service is enabled for inbound traffic"""
  provideEnabled: Boolean!

  """Unique identifier for the service"""
  serviceId: ID!

  """Name of the service"""
  serviceName: String!

  """Whether the service is enabled for outbound traffic"""
  useEnabled: Boolean!
}

type GraphicConfigurationType {
  link: String!
  password: String!
  protocol: String!
}

type ISO {
  checksum: String
  createdAt: DateTimeISO!
  downloadUrl: String
  filename: String!
  id: ID!
  isAvailable: Boolean!
  lastVerified: DateTimeISO
  os: String!
  path: String!
  size: String!
  updatedAt: DateTimeISO!
  uploadedAt: DateTimeISO!
  version: String
}

type ISOAvailabilityMap {
  available: Boolean!
  os: String!
}

type ISOStatus {
  available: Boolean!
  iso: ISO
  os: String!
}

type InfiniServiceStatus {
  error: String
  installed: Boolean!
  running: Boolean!
}

input IpRangeInput {
  end: String! = ""
  networkName: String! = ""
  start: String! = ""
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Machine {
  configuration: JSONObject
  cpuCores: Int
  createdAt: DateTimeISO
  department: DepartmentType
  gpuPciAddress: String
  id: ID!
  name: String!
  ramGB: Int
  status: String!
  template: MachineTemplateType
  templateId: String
  user: UserType
  userId: String
}

input MachineApplicationInputType {
  applicationId: String! = ""
  machineId: String! = ""
  parameters: JSONObject = null
}

input MachineOrderBy {
  direction: OrderByDirection
  fieldName: MachineOrderByField
}

"""The field to order machines by"""
enum MachineOrderByField {
  CONFIG
  CREATED_AT
  ID
  STATUS
  TEMPLATE_ID
  USER_ID
}

"""The os of the machine"""
enum MachineOs {
  FEDORA
  UBUNTU
  WINDOWS10
  WINDOWS11
}

input MachineTemplateCategoryInputType {
  description: String = null
  name: String! = ""
}

type MachineTemplateCategoryType {
  createdAt: DateTimeISO!
  description: String
  id: ID!
  name: String!
  totalMachines: Int
  totalTemplates: Int
}

input MachineTemplateInputType {
  """The ID of the category for the machine template"""
  categoryId: ID = null

  """The number of cores for the machine"""
  cores: Int! = 0

  """A brief description of the machine template"""
  description: String! = ""

  """The name of the machine template"""
  name: String! = ""

  """The amount of RAM (in GB) for the machine"""
  ram: Int! = 0

  """The storage space (in GB) for the machine"""
  storage: Int! = 0
}

input MachineTemplateOrderBy {
  direction: OrderByDirection
  fieldName: MachineTemplateOrderByField
}

"""The field to order machine templates by"""
enum MachineTemplateOrderByField {
  CORES
  CREATED_AT
  ID
  NAME
  RAM
  STORAGE
}

type MachineTemplateType {
  categoryId: ID
  cores: Int!
  createdAt: DateTimeISO!
  description: String
  id: ID!
  name: String
  ram: Int!
  storage: Int!
  totalMachines: Int
}

type Mutation {
  applyFirewallTemplate(input: ApplyFirewallTemplateInput!): VMFirewallState!

  """Calculate ISO checksum"""
  calculateISOChecksum(isoId: String!): String!

  """Control a service on a virtual machine"""
  controlService(input: ServiceControlInput!): ServiceStatusType!
  createApplication(input: CreateApplicationInputType!): ApplicationType!
  createDepartment(name: String!): DepartmentType!
  createFilter(input: CreateFilterInput!): GenericFilter!
  createFilterRule(filterId: ID!, input: CreateFilterRuleInput!): FWRule!
  createMachine(input: CreateMachineInputType!): Machine!
  createMachineTemplate(input: MachineTemplateInputType!): MachineTemplateType!
  createMachineTemplateCategory(input: MachineTemplateCategoryInputType!): MachineTemplateCategoryType!
  createNetwork(input: CreateNetworkInput!): Boolean!
  createSimplifiedFirewallRule(input: CreateSimplifiedFirewallRuleInput!): VMFirewallState!

  """Create a snapshot of a virtual machine"""
  createSnapshot(input: CreateSnapshotInput!): SnapshotResult!
  createUser(input: CreateUserInputType!): UserType!
  deleteApplication(id: String!): Boolean!
  deleteFilter(id: ID!): Boolean!
  deleteFilterRule(id: ID!): Boolean!
  deleteNetwork(input: DeleteNetworkInput!): Boolean!

  """Delete a snapshot from a virtual machine"""
  deleteSnapshot(input: DeleteSnapshotInput!): SuccessType!
  destroyDepartment(id: String!): DepartmentType!
  destroyMachine(id: String!): SuccessType!
  destroyMachineTemplate(id: String!): Boolean!
  destroyMachineTemplateCategory(id: String!): Boolean!
  executeCommand(command: String!, id: String!): CommandExecutionResponseType!

  """Apply a network filter inmediatly"""
  flushFilter(filterId: ID!): Boolean!
  forcePowerOff(id: String!): SuccessType!

  """Force power off and restore snapshot (emergency recovery)"""
  forceRestoreSnapshot(input: RestoreSnapshotInput!): SuccessType!

  """Install a package on a virtual machine (legacy compatibility)"""
  installPackage(machineId: ID!, packageName: String!): CommandResult!
  killProcess(force: Boolean! = false, machineId: String!, pid: Int!): ProcessControlResult!
  killProcesses(force: Boolean! = false, machineId: String!, pids: [Int!]!): [ProcessControlResult!]!

  """Install, remove, or update a package on a virtual machine"""
  managePackage(input: PackageManagementInput!): PackageManagementResult!
  moveMachine(departmentId: String!, id: String!): Machine!
  powerOff(id: String!): SuccessType!
  powerOn(id: String!): SuccessType!

  """Register uploaded ISO"""
  registerISO(filename: String!, os: String!, path: String!, size: Float!): ISO!
  removeFirewallTemplate(machineId: ID!, template: FirewallTemplate!): VMFirewallState!

  """Remove ISO file"""
  removeISO(isoId: String!): Boolean!

  """Remove a package from a virtual machine (legacy compatibility)"""
  removePackage(machineId: ID!, packageName: String!): CommandResult!
  removeSimplifiedFirewallRule(machineId: ID!, ruleId: ID!): VMFirewallState!
  resetMachine(id: String!): SuccessType!
  restartMachine(id: String!): SuccessType!

  """Restore a virtual machine to a snapshot"""
  restoreSnapshot(input: RestoreSnapshotInput!): SuccessType!
  setNetworkBridgeName(input: BridgeNameInput!): Boolean!
  setNetworkIp(input: NetworkIpInput!): Boolean!
  setNetworkIpRange(input: IpRangeInput!): Boolean!
  setupNode: DyummyType!
  suspend(id: String!): SuccessType!

  """Sync ISOs with filesystem"""
  syncISOs: Boolean!
  toggleDepartmentService(input: ToggleDepartmentServiceInput!): DepartmentServiceStatus!
  toggleFirewallTemplate(machineId: ID!, template: FirewallTemplate!): VMFirewallState!
  toggleGlobalService(input: ToggleServiceInput!): GlobalServiceStatus!
  toggleVmService(input: ToggleVmServiceInput!): VmServiceStatus!
  updateApplication(id: String!, input: CreateApplicationInputType!): ApplicationType!
  updateFilter(id: ID!, input: UpdateFilterInput!): GenericFilter!
  updateFilterRule(id: ID!, input: UpdateFilterRuleInput!): FWRule!
  updateMachineHardware(input: UpdateMachineHardwareInput!): Machine!
  updateMachineTemplate(id: String!, input: MachineTemplateInputType!): MachineTemplateType!
  updateMachineTemplateCategory(id: String!, input: MachineTemplateCategoryInputType!): MachineTemplateCategoryType!

  """Update a package on a virtual machine (legacy compatibility)"""
  updatePackage(machineId: ID!, packageName: String!): CommandResult!
  updateUser(id: String!, input: UpdateUserInputType!): UserType!

  """Validate ISO file integrity"""
  validateISO(isoId: String!): Boolean!
}

type Network {
  bridge: NetworkBridge!
  description: String
  ip: NetworkIp!
  name: String!
  uuid: String!
}

type NetworkBridge {
  delay: String!
  name: String!
  stp: String!
}

type NetworkDhcp {
  range: NetworkDhcpRange!
}

type NetworkDhcpRange {
  end: String!
  start: String!
}

input NetworkDhcpRangeInput {
  end: String! = ""
  start: String! = ""
}

type NetworkIp {
  address: String!
  dhcp: NetworkDhcp
  netmask: String!
}

input NetworkIpConfigInput {
  address: String! = ""
  dhcp: NetworkDhcpRangeInput
  netmask: String! = ""
}

input NetworkIpInput {
  address: String! = ""
  netmask: String! = ""
  networkName: String! = ""
}

enum OrderByDirection {
  ASC
  DESC
}

"""Available package management actions"""
enum PackageAction {
  INSTALL
  REMOVE
  UPDATE
}

"""Information about a software package"""
type PackageInfo {
  """Package description"""
  description: String

  """Whether the package is installed"""
  installed: Boolean!

  """Package name"""
  name: String!

  """Package publisher or vendor"""
  publisher: String

  """Package source or repository"""
  source: String

  """Package version"""
  version: String!
}

"""Input for package management operations"""
input PackageManagementInput {
  """Action to perform on the package"""
  action: PackageAction! = INSTALL

  """ID of the target machine"""
  machineId: ID! = ""

  """Name of the package to manage"""
  packageName: String! = ""
}

"""Result of a package management operation"""
type PackageManagementResult {
  """Error message if operation failed"""
  error: String

  """Human-readable message about the operation"""
  message: String!

  """List of packages (for list operations)"""
  packages: [PackageInfo!]

  """Standard error from the command"""
  stderr: String

  """Standard output from the command"""
  stdout: String

  """Whether the operation was successful"""
  success: Boolean!
}

input PaginationInputType {
  skip: Int = 0
  take: Int = 20
}

type ProcessControlResult {
  error: String
  message: String!
  pid: Int
  processName: String
  success: Boolean!
}

type ProcessInfo {
  commandLine: String
  cpuUsage: Float!
  memoryKb: Int!
  name: String!
  pid: Int!
  startTime: DateTimeISO
  status: String!
  user: String
}

"""Options for sorting processes"""
enum ProcessSortBy {
  CPU
  MEMORY
  NAME
  PID
}

type Query {
  """Get all ISOs (available and unavailable)"""
  allISOs: [ISO!]!
  application(id: String!): ApplicationType
  applications: [ApplicationType!]!

  """Get all available ISOs"""
  availableISOs: [ISO!]!

  """Check if ISO is available for specific OS"""
  checkISOStatus(os: String!): ISOStatus!

  """Check availability for multiple OS types"""
  checkMultipleOSAvailability(osList: [String!]!): [ISOAvailabilityMap!]!
  checkSetupStatus: DyummyType!

  """Check overall system readiness"""
  checkSystemReadiness: SystemReadiness!

  """Get the current snapshot of a virtual machine"""
  currentSnapshot(machineId: String!): Snapshot
  currentUser: UserType
  department(id: String!): DepartmentType
  departments: [DepartmentType!]!
  findDepartmentByName(name: String!): DepartmentType
  getAvailableFirewallTemplates: [FirewallTemplateInfo!]!
  getDepartmentServiceStatus(departmentId: ID!, serviceId: ID): [DepartmentServiceStatus!]!
  getFilter(id: ID!): GenericFilter
  getFirewallTemplateInfo(template: FirewallTemplate!): FirewallTemplateInfo
  getGlobalServiceStatus(serviceId: ID): [GlobalServiceStatus!]!
  getGraphics: [GPU!]!
  getServiceStatusSummary: [ServiceStatusSummary!]!
  getSimplifiedFirewallRules(machineId: ID!): [SimplifiedFirewallRule!]!

  """Get supported OS types"""
  getSupportedOSTypes: [String!]!
  getSystemResources: SystemResources!
  getTopProcesses(limit: Int! = 10, machineId: String!, sortBy: ProcessSortBy! = CPU): [ProcessInfo!]!
  getVMFirewallState(machineId: ID!): VMFirewallState!
  getVmServiceStatus(serviceId: ID, vmId: ID!): [VmServiceStatus!]!
  graphicConnection(id: String!): GraphicConfigurationType
  listFilterRules(filterId: ID): [FWRule!]!
  listFilters(departmentId: ID, vmId: ID): [GenericFilter!]!

  """List all installed packages on a virtual machine"""
  listInstalledPackages(machineId: ID!): [PackageInfo!]!
  listProcesses(limit: Int, machineId: String!): [ProcessInfo!]!

  """List all services running on a virtual machine"""
  listServices(machineId: String!): [ServiceInfo!]!
  login(email: String!, password: String!): UserToken!
  machine(id: String!): Machine

  """List all snapshots for a virtual machine"""
  machineSnapshots(machineId: String!): SnapshotListResult!
  machineTemplate(id: String!): MachineTemplateType
  machineTemplateCategories: [MachineTemplateCategoryType!]!
  machineTemplateCategory(id: String!): MachineTemplateCategoryType
  machineTemplates(orderBy: MachineTemplateOrderBy, pagination: PaginationInputType): [MachineTemplateType!]!
  machines(orderBy: MachineOrderBy, pagination: PaginationInputType): [Machine!]!
  network(name: String!): Network!
  networks: [Network!]!

  """Search for available packages on a virtual machine"""
  searchPackages(machineId: ID!, query: String!): [PackageInfo!]!

  """Get current socket connection statistics for all VMs"""
  socketConnectionStats: SocketConnectionStats
  user(id: String!): UserType!
  users(orderBy: UserOrderByInputType, pagination: PaginationInputType): [UserType!]!

  """Get comprehensive diagnostics for VM socket connection issues"""
  vmSocketDiagnostics(vmId: String!): VmDiagnostics!
}

input RestoreSnapshotInput {
  machineId: String!
  snapshotName: String!
}

"""Service action type (USE for outbound, PROVIDE for inbound)"""
enum ServiceAction {
  PROVIDE
  USE
}

input ServiceControlInput {
  action: VMServiceAction!
  machineId: String!
  serviceName: String!
}

type ServiceInfo {
  description: String
  displayName: String
  name: String!
  pid: Float
  startType: ServiceStartType
  status: ServiceStatus!
}

"""The startup type of a system service"""
enum ServiceStartType {
  AUTOMATIC
  DISABLED
  MANUAL
  UNKNOWN
}

"""The current status of a system service"""
enum ServiceStatus {
  DISABLED
  RUNNING
  STOPPED
  UNKNOWN
}

type ServiceStatusSummary {
  """Number of VMs with this service enabled"""
  enabledVms: Float!

  """Number of VMs with this service running"""
  runningVms: Float!

  """Unique identifier for the service"""
  serviceId: ID!

  """Name of the service"""
  serviceName: String!

  """Total number of VMs"""
  totalVms: Float!
}

type ServiceStatusType {
  error: String
  message: String!
  service: ServiceInfo
  success: Boolean!
}

type SimplifiedFirewallRule {
  action: String!
  description: String
  direction: String!
  id: ID
  port: String!
  protocol: String!
  sources: [String!]
}

type Snapshot {
  createdAt: DateTimeISO!
  description: String
  hasMetadata: Boolean!
  id: ID!
  isCurrent: Boolean!
  name: String!
  parentId: String
  state: String!
  vmId: String!
  vmName: String!
}

type SnapshotListResult {
  message: String!
  snapshots: [Snapshot!]!
  success: Boolean!
}

type SnapshotResult {
  message: String!
  snapshot: Snapshot
  success: Boolean!
}

type SocketConnectionStats {
  activeConnections: Float
  connections: [VmConnectionInfo!]
  isConnected: Boolean
  lastMessageTime: String
  reconnectAttempts: Float
  totalConnections: Float
}

type SuccessType {
  message: String!
  success: Boolean!
}

type SystemReadiness {
  availableOS: [String!]!
  missingOS: [String!]!
  ready: Boolean!
}

type SystemResourceCPU {
  available: Float!
  total: Float!
}

type SystemResourceDisk {
  available: Float!
  total: Float!
  used: Float!
}

type SystemResourceMemory {
  available: Float!
  total: Float!
}

type SystemResources {
  cpu: SystemResourceCPU!
  disk: SystemResourceDisk!
  memory: SystemResourceMemory!
}

input ToggleDepartmentServiceInput {
  """Service action (USE for outbound, PROVIDE for inbound)"""
  action: ServiceAction!

  """Unique identifier of the department"""
  departmentId: ID!

  """Whether to enable or disable the service"""
  enabled: Boolean!

  """Unique identifier of the service to toggle"""
  serviceId: ID!
}

input ToggleServiceInput {
  """Service action (USE for outbound, PROVIDE for inbound)"""
  action: ServiceAction!

  """Whether to enable or disable the service"""
  enabled: Boolean!

  """Unique identifier of the service to toggle"""
  serviceId: ID!
}

input ToggleVmServiceInput {
  """Service action (USE for outbound, PROVIDE for inbound)"""
  action: ServiceAction!

  """Whether to enable or disable the service"""
  enabled: Boolean!

  """Unique identifier of the service to toggle"""
  serviceId: ID!

  """Unique identifier of the VM"""
  vmId: ID!
}

input UpdateFilterInput {
  chain: String
  description: String
  name: String
  type: String
}

input UpdateFilterRuleInput {
  action: String! = ""
  comment: String
  direction: String! = ""
  dstPortEnd: Int
  dstPortStart: Int
  ipVersion: String
  priority: Int! = 0
  protocol: String
  srcPortEnd: Int
  srcPortStart: Int
  state: String
}

input UpdateMachineHardwareInput {
  """New number of CPU cores"""
  cpuCores: Int

  """New GPU PCI address (e.g., 0000:01:00.0). Set to null to remove GPU."""
  gpuPciAddress: String
  id: ID! = ""

  """New RAM in GB"""
  ramGB: Int
}

input UpdateUserInputType {
  firstName: String = ""
  lastName: String = ""
  password: String = ""
  passwordConfirmation: String = ""
  role: UserRole = USER
}

"""The field to order users by"""
enum UserOrderByField {
  CREATED_AT
  EMAIL
  FIRST_NAME
  ID
  LAST_NAME
  ROLE
  UPDATED_AT
}

input UserOrderByInputType {
  direction: OrderByDirection
  fieldName: UserOrderByField
}

"""The basic roles of users"""
enum UserRole {
  ADMIN
  USER
}

"""Token used to log in"""
type UserToken {
  token: String!
}

"""User model"""
type UserType {
  createdAt: DateTimeISO!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!

  """User namespace for real-time events"""
  namespace: String
  role: String!
}

type VMFirewallState {
  appliedTemplates: [String!]!
  customRules: [SimplifiedFirewallRule!]!
  effectiveRules: [SimplifiedFirewallRule!]!
  lastSync: DateTimeISO
}

"""Actions that can be performed on a VM service"""
enum VMServiceAction {
  DISABLE
  ENABLE
  RESTART
  START
  STATUS
  STOP
}

type VmConnectionInfo {
  isConnected: Boolean!
  lastMessageTime: String!
  reconnectAttempts: Float!
  vmId: String!
}

type VmDiagnostics {
  connectionStats: SocketConnectionStats
  diagnostics: [String!]!
  infiniService: InfiniServiceStatus!
  manualCommands: [String!]!
  recommendations: [String!]!
  timestamp: String!
  vmId: String!
  vmName: String!
  vmStatus: String!
}

type VmServiceStatus {
  """When the service was last seen running"""
  lastSeen: DateTimeISO

  """Whether the service is enabled for inbound traffic"""
  provideEnabled: Boolean!

  """Whether the service is currently running"""
  running: Boolean!

  """Unique identifier for the service"""
  serviceId: ID!

  """Name of the service"""
  serviceName: String!

  """Whether the service is enabled for outbound traffic"""
  useEnabled: Boolean!

  """Unique identifier for the VM"""
  vmId: ID!

  """Name of the VM"""
  vmName: String!
}