type Query {
  user(id: String!): UserType!
  users(pagination: PaginationInputType, orderBy: UserOrderByInputType): [UserType!]!
  login(password: String!, email: String!): UserToken!
  machineTemplate(id: String!): MachineTemplateType
  machineTemplates(orderBy: MachineTemplateOrderBy, pagination: PaginationInputType): [MachineTemplateType!]!
  machine(id: String!): Machine
  machines(orderBy: MachineOrderBy, pagination: PaginationInputType): [Machine!]!
  vncConnection(id: String!): MachineConfigurationType
}

"""User model"""
type UserType {
  id: ID!
  firstName: String!
  lastName: String!
  role: String!
  createdAt: DateTimeISO!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input PaginationInputType {
  take: Int = 20
  skip: Int = 0
}

input UserOrderByInputType {
  fieldName: UserOrderByField
  direction: OrderByDirection
}

"""The field to order users by"""
enum UserOrderByField {
  ID
  EMAIL
  FIRST_NAME
  LAST_NAME
  ROLE
  CREATED_AT
  UPDATED_AT
}

enum OrderByDirection {
  ASC
  DESC
}

"""Token used to log in"""
type UserToken {
  token: String!
}

type MachineTemplateType {
  id: ID!
  name: String
  description: String
  cores: Int!
  ram: Int!
  storage: Int!
  createdAt: Int!
}

input MachineTemplateOrderBy {
  fieldName: MachineTemplateOrderByField
  direction: OrderByDirection
}

"""The field to order machine templates by"""
enum MachineTemplateOrderByField {
  ID
  NAME
  CORES
  RAM
  STORAGE
  CREATED_AT
}

type Machine {
  id: ID!
  config: JSONObject!
  status: String!
  userId: String!
  templateId: String!
  createAt: DateTimeISO!
  template: MachineTemplateType
  user: UserType
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input MachineOrderBy {
  fieldName: MachineOrderByField
  direction: OrderByDirection
}

"""The field to order machines by"""
enum MachineOrderByField {
  ID
  CONFIG
  STATUS
  USER_ID
  TEMPLATE_ID
  CREATED_AT
}

type MachineConfigurationType {
  port: Int!
  address: String!
}

type Mutation {
  createUser(input: CreateUserInputType!): UserType!
  updateUser(input: UpdateUserInputType!, id: String!): UserType!
  createMachineTemplate(input: MachineTemplateInputType!): MachineTemplateType!
  updateMachineTemplate(input: MachineTemplateInputType!, id: String!): MachineTemplateType!
  createMachine(input: CreateMachineInputType!): Machine!
}

input CreateUserInputType {
  firstName: String! = ""
  lastName: String! = ""
  email: String! = ""
  password: String! = ""
  passwordConfirmation: String! = ""
  role: UserRole! = USER
}

"""The basic roles of users"""
enum UserRole {
  ADMIN
  USER
}

input UpdateUserInputType {
  firstName: String = ""
  lastName: String = ""
  password: String = ""
  passwordConfirmation: String = ""
  role: UserRole = USER
}

input MachineTemplateInputType {
  name: String! = ""
  description: String! = ""
  cores: Int! = 0
  ram: Int! = 0
  storage: Int! = 0
}

input CreateMachineInputType {
  templateId: String! = ""
  name: String! = ""
  os: MachineOs! = WINDOWS10
  username: String! = ""
  password: String! = ""
  productKey: String! = ""
  applications: [MachineApplicationInputType!]! = []
}

"""The os of the machine"""
enum MachineOs {
  WINDOWS10
  WINDOWS11
  FEDORA
  UBUNTU
}

input MachineApplicationInputType {
  machineId: String! = ""
  applicationId: String! = ""
}