generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  password           String
  deleted            Boolean
  token              String               @default("null")
  firstName          String
  lastName           String
  createdAt          DateTime             @default(now())
  role               UserRole             @default(USER)
  updatedAt          DateTime             @updatedAt
  VM                 Machine[]
  maintenanceHistory MaintenanceHistory[]
  maintenanceTasks   MaintenanceTask[]
}

model Node {
  id          String   @id @default(uuid())
  name        String
  currentRaid String
  nextRaid    String?
  cpuFlags    Json
  ram         Int
  cores       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  disks       Disk[]
}

model Disk {
  id        String   @id @default(uuid())
  path      String
  nodeId    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  node      Node     @relation(fields: [nodeId], references: [id])
}

model ISO {
  id           String    @id @default(uuid())
  filename     String    @unique
  os           String
  version      String?
  size         BigInt
  uploadedAt   DateTime  @default(now())
  lastVerified DateTime?
  isAvailable  Boolean   @default(true)
  checksum     String?
  downloadUrl  String?
  path         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Machine {
  id                 String                @id @default(uuid())
  name               String
  internalName       String
  status             String
  userId             String?
  templateId         String?
  os                 String
  cpuCores           Int                   @default(0)
  ramGB              Int                   @default(0)
  diskSizeGB         Int                   @default(0)
  gpuPciAddress      String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  departmentId       String?
  localIP            String?
  publicIP           String?
  firewallRuleSetId  String?               @unique
  applicationUsage   ApplicationUsage[]
  department         Department?           @relation(fields: [departmentId], references: [id])
  firewallRuleSet    FirewallRuleSet?      @relation(fields: [firewallRuleSetId], references: [id])
  template           MachineTemplate?      @relation(fields: [templateId], references: [id])
  user               User?                 @relation(fields: [userId], references: [id])
  applications       MachineApplication[]
  configuration      MachineConfiguration?
  maintenanceHistory MaintenanceHistory[]
  maintenanceTasks   MaintenanceTask[]
  pendingCommands      PendingCommand[]
  portUsage            PortUsage[]
  blockedConnections   BlockedConnection[]
  processSnapshots     ProcessSnapshot[]
  systemEvents         SystemEvent[]
  systemMetrics      SystemMetrics[]
  healthAlerts       VMHealthAlert[]
  healthCheckQueue   VMHealthCheckQueue[]
  healthConfig       VMHealthConfig?
  healthSnapshots    VMHealthSnapshot[]
  recommendations    VMRecommendation[]
  windowsServices    WindowsService[]
}

model MachineConfiguration {
  id              String   @id @default(uuid())
  xml             Json?
  graphicProtocol String?
  graphicPort     Int?
  graphicPassword String?
  graphicHost     String?
  assignedGpuBus  String?
  machineId       String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  machine         Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)
}

model MachineTemplate {
  id          String                   @id @default(uuid())
  name        String
  description String?
  cores       Int
  /// In GB
  ram         Int
  /// In GB
  storage     Int
  createdAt   DateTime                 @default(now())
  categoryId  String?
  updatedAt   DateTime                 @updatedAt
  machines    Machine[]
  category    MachineTemplateCategory? @relation(fields: [categoryId], references: [id])
}

model MachineTemplateCategory {
  id          String            @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  templates   MachineTemplate[]
}

model Application {
  id             String               @id @default(uuid())
  name           String
  description    String?
  version        String?
  url            String?
  icon           String?
  os             String[]
  installCommand Json
  parameters     Json
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  machines       MachineApplication[]
}

model MachineApplication {
  machineId     String
  applicationId String
  parameters    Json
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  application   Application @relation(fields: [applicationId], references: [id])
  machine       Machine     @relation(fields: [machineId], references: [id])

  @@id([machineId, applicationId])
}

model PendingCommand {
  id         String   @id @default(uuid())
  machineId  String
  command    String
  parameters Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  machine    Machine  @relation(fields: [machineId], references: [id])

  @@index([machineId])
}

model Notification {
  id        String   @id @default(uuid())
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id                  String           @id @default(uuid())
  name                String
  createdAt           DateTime         @default(now())
  internetSpeed       Int?
  ipSubnet            String?
  updatedAt           DateTime         @updatedAt
  firewallRuleSetId   String?          @unique
  firewallRuleSet     FirewallRuleSet? @relation(fields: [firewallRuleSetId], references: [id])
  machines            Machine[]
}

model SystemMetrics {
  id                String   @id @default(uuid())
  machineId         String
  cpuUsagePercent   Float
  cpuCoresUsage     Json
  cpuTemperature    Float?
  totalMemoryKB     BigInt
  usedMemoryKB      BigInt
  availableMemoryKB BigInt
  swapTotalKB       BigInt?
  swapUsedKB        BigInt?
  diskUsageStats    Json
  diskIOStats       Json
  networkStats      Json
  uptime            BigInt
  loadAverage       Json?
  timestamp         DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  machine           Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, timestamp])
}

model ProcessSnapshot {
  id              String    @id @default(uuid())
  machineId       String
  processId       Int
  parentPid       Int?
  name            String
  executablePath  String?
  commandLine     String?
  cpuUsagePercent Float
  memoryUsageKB   BigInt
  diskReadBytes   BigInt?
  diskWriteBytes  BigInt?
  status          String
  startTime       DateTime?
  timestamp       DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  machine         Machine   @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, timestamp])
  @@index([machineId, processId, timestamp])
}

model ApplicationUsage {
  id                String    @id @default(uuid())
  machineId         String
  executablePath    String
  applicationName   String
  version           String?
  description       String?
  publisher         String?
  lastAccessTime    DateTime?
  lastModifiedTime  DateTime?
  accessCount       Int       @default(0)
  totalUsageMinutes Int       @default(0)
  iconData          Bytes?
  iconFormat        String?
  fileSize          BigInt?
  firstSeen         DateTime  @default(now())
  lastSeen          DateTime  @default(now())
  isActive          Boolean   @default(true)
  updatedAt         DateTime  @updatedAt
  machine           Machine   @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@unique([machineId, executablePath])
  @@index([machineId, lastAccessTime])
  @@index([machineId, isActive])
}

model PortUsage {
  id              String   @id @default(uuid())
  machineId       String
  port            Int
  protocol        String
  state           String
  processId       Int?
  processName     String?
  executablePath  String?
  isListening     Boolean  @default(false)
  connectionCount Int      @default(0)
  lastActivity    DateTime @default(now())
  timestamp       DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  machine         Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, port, protocol])
  @@index([machineId, timestamp])
  @@index([machineId, isListening])
}

model BlockedConnection {
  id          String   @id @default(uuid())
  machineId   String
  port        Int
  protocol    String
  processName String?
  processId   Int?
  attemptTime DateTime @default(now())
  blockReason String
  sourceIp    String?
  ruleId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  machine     Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, attemptTime])
  @@index([machineId, port, protocol])
}

model WindowsService {
  id               String                @id @default(uuid())
  machineId        String
  serviceName      String
  displayName      String
  description      String?
  startType        String
  serviceType      String
  executablePath   String?
  dependencies     Json?
  currentState     String
  processId        Int?
  lastStateChange  DateTime?
  stateChangeCount Int                   @default(0)
  isDefaultService Boolean               @default(false)
  usageScore       Float?                @default(0)
  firstSeen        DateTime              @default(now())
  lastSeen         DateTime              @default(now())
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  stateHistory     ServiceStateHistory[]
  machine          Machine               @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@unique([machineId, serviceName])
  @@index([machineId, currentState])
  @@index([machineId, isDefaultService])
}

model ServiceStateHistory {
  id        String         @id @default(uuid())
  serviceId String
  fromState String?
  toState   String
  reason    String?
  timestamp DateTime       @default(now())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  service   WindowsService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId, timestamp])
}

model ErrorLog {
  id        String   @id @default(uuid())
  message   String
  stack     String?
  code      String
  severity  String
  context   Json?
  timestamp DateTime @default(now())
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([timestamp])
  @@index([severity, timestamp])
  @@index([code, timestamp])
}

model PerformanceMetric {
  id        String   @id @default(uuid())
  name      String
  value     Float
  tags      Json?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, timestamp])
  @@index([timestamp])
}

model PerformanceAggregate {
  id        String   @id @default(uuid())
  name      String
  period    String
  count     Int
  sum       Float
  min       Float
  max       Float
  avg       Float
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, period, timestamp])
  @@index([timestamp])
}

model HealthCheck {
  id           String   @id @default(uuid())
  service      String
  status       String
  message      String?
  details      Json?
  responseTime Int?
  timestamp    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([service, timestamp])
  @@index([status, timestamp])
  @@index([timestamp])
}

model BackgroundTaskLog {
  id         String    @id @default(uuid())
  taskId     String    @unique
  taskName   String
  status     String
  startTime  DateTime
  endTime    DateTime?
  retryCount Int       @default(0)
  error      String?
  result     Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([status, createdAt])
  @@index([taskName, createdAt])
  @@index([createdAt])
}

model VMHealthAlert {
  id          String    @id @default(uuid())
  machineId   String
  type        String
  severity    String
  title       String
  description String
  resolved    Boolean   @default(false)
  resolvedAt  DateTime?
  metadata    Json?
  remediation Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  machine     Machine   @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, resolved])
  @@index([machineId, severity])
  @@index([createdAt])
}

model VMHealthConfig {
  id                   String   @id @default(uuid())
  machineId            String   @unique
  checkIntervalMinutes Int      @default(5)
  metricsRetentionDays Int      @default(7)
  thresholds           Json
  enabledModules       String[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  machine              Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)
}

model KnownService {
  id          String   @id @default(uuid())
  name        String   @unique
  displayName String
  description String
  category    String
  ports       Json
  executable  String?
  os          String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SystemEvent {
  id          String   @id @default(uuid())
  machineId   String
  eventType   String
  severity    String
  title       String
  description String
  metadata    Json?
  timestamp   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  machine     Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, timestamp])
  @@index([machineId, eventType])
}

model VMHealthSnapshot {
  id                   String             @id @default(uuid())
  machineId            String
  snapshotDate         DateTime           @default(now())
  overallStatus        String
  diskSpaceInfo        Json?
  resourceOptInfo      Json?
  windowsUpdateInfo    Json?
  defenderStatus       Json?
  applicationInventory Json?
  customCheckResults   Json?
  osType               String?
  checksCompleted      Int                @default(0)
  checksFailed         Int                @default(0)
  executionTimeMs      Int?
  errorSummary         String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  machine              Machine            @relation(fields: [machineId], references: [id], onDelete: Cascade)
  recommendations      VMRecommendation[]

  @@index([machineId, snapshotDate])
  @@index([snapshotDate])
  @@index([machineId, overallStatus])
}

model VMHealthCheckQueue {
  id              String          @id @default(uuid())
  machineId       String
  checkType       HealthCheckType
  priority        TaskPriority    @default(MEDIUM)
  status          TaskStatus      @default(PENDING)
  payload         Json?
  attempts        Int             @default(0)
  maxAttempts     Int             @default(3)
  scheduledFor    DateTime        @default(now())
  executedAt      DateTime?
  completedAt     DateTime?
  error           String?
  result          Json?
  executionTimeMs Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  machine         Machine         @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, status])
  @@index([status, priority, scheduledFor])
  @@index([scheduledFor, status])
  @@index([machineId, checkType, status])
}

model MaintenanceTask {
  id              String               @id @default(uuid())
  machineId       String
  taskType        MaintenanceTaskType
  name            String
  description     String?
  isEnabled       Boolean              @default(true)
  isRecurring     Boolean              @default(false)
  cronSchedule    String?
  runAt           DateTime?
  nextRunAt       DateTime?
  lastRunAt       DateTime?
  parameters      Json?
  createdByUserId String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  executionStatus String               @default("IDLE")
  history         MaintenanceHistory[]
  createdBy       User                 @relation(fields: [createdByUserId], references: [id])
  machine         Machine              @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, isEnabled])
  @@index([machineId, taskType])
  @@index([nextRunAt, isEnabled])
  @@index([taskType, isEnabled])
}

model MaintenanceHistory {
  id               String              @id @default(uuid())
  taskId           String?
  machineId        String
  taskType         MaintenanceTaskType
  status           MaintenanceStatus
  duration         Int?
  result           Json?
  error            String?
  triggeredBy      MaintenanceTrigger
  executedByUserId String?
  executedAt       DateTime            @default(now())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  executedBy       User?               @relation(fields: [executedByUserId], references: [id])
  machine          Machine             @relation(fields: [machineId], references: [id], onDelete: Cascade)
  task             MaintenanceTask?    @relation(fields: [taskId], references: [id])

  @@index([machineId, executedAt])
  @@index([machineId, status])
  @@index([taskType, status])
  @@index([executedAt])
}

model VMRecommendation {
  id         String             @id @default(uuid())
  machineId  String
  snapshotId String?
  type       RecommendationType
  text       String
  actionText String
  data       Json?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  machine    Machine            @relation(fields: [machineId], references: [id], onDelete: Cascade)
  snapshot   VMHealthSnapshot?  @relation(fields: [snapshotId], references: [id])

  @@index([machineId, createdAt])
  @@index([machineId, snapshotId])
}

model AppSettings {
  id            String   @id @default(uuid())
  theme         String   @default("system")
  wallpaper     String   @default("wallpaper1.jpg")
  logoUrl       String?
  interfaceSize String   @default("xl")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([id])
}

model FirewallRuleSet {
  id            String        @id @default(uuid())
  name          String
  internalName  String        @unique
  entityType    RuleSetType
  entityId      String
  priority      Int           @default(500)
  isActive      Boolean       @default(true)
  libvirtUuid   String?       @unique
  xmlContent    String?
  lastSyncedAt  DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  department    Department?
  machine       Machine?
  rules         FirewallRule[]

  @@unique([entityType, entityId])
  @@index([isActive])
}

model FirewallRule {
  id              String          @id @default(uuid())
  ruleSetId       String
  name            String
  description     String?
  action          RuleAction      @default(ACCEPT)
  direction       RuleDirection   @default(INOUT)
  priority        Int             @default(500)
  protocol        String          @default("all")
  srcPortStart    Int?
  srcPortEnd      Int?
  dstPortStart    Int?
  dstPortEnd      Int?
  srcIpAddr       String?
  srcIpMask       String?
  dstIpAddr       String?
  dstIpMask       String?
  connectionState Json?
  overridesDept   Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  ruleSet         FirewallRuleSet @relation(fields: [ruleSetId], references: [id], onDelete: Cascade)

  @@index([ruleSetId, priority])
}

enum RuleSetType {
  DEPARTMENT
  VM
}

enum RuleAction {
  ACCEPT
  DROP
  REJECT
}

enum RuleDirection {
  IN
  OUT
  INOUT
}

enum HealthCheckType {
  OVERALL_STATUS
  DISK_SPACE
  RESOURCE_OPTIMIZATION
  WINDOWS_UPDATES
  WINDOWS_DEFENDER
  APPLICATION_INVENTORY
  APPLICATION_UPDATES
  SECURITY_CHECK
  PERFORMANCE_CHECK
  SYSTEM_HEALTH
  CUSTOM_CHECK
}

enum TaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  RETRY_SCHEDULED
}

enum TaskPriority {
  URGENT
  HIGH
  MEDIUM
  LOW
}

enum MaintenanceTaskType {
  DISK_CLEANUP
  DEFRAG
  WINDOWS_UPDATES
  DEFENDER_SCAN
  SYSTEM_FILE_CHECK
  DISK_CHECK
  REGISTRY_CLEANUP
  CUSTOM_SCRIPT
}

enum MaintenanceStatus {
  SUCCESS
  FAILED
  CANCELLED
  TIMEOUT
  RUNNING
}

enum MaintenanceTrigger {
  SCHEDULED
  MANUAL
}

enum RecommendationType {
  DISK_SPACE_LOW
  HIGH_CPU_APP
  HIGH_RAM_APP
  PORT_BLOCKED
  OVER_PROVISIONED
  UNDER_PROVISIONED
  OS_UPDATE_AVAILABLE
  APP_UPDATE_AVAILABLE
  DEFENDER_DISABLED
  DEFENDER_THREAT
  OTHER
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}
