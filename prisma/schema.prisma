generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  deleted   Boolean
  token     String    @default("null")
  firstName String
  lastName  String
  userImage String?   @unique
  role      String
  createdAt DateTime  @default(now())
  VM        Machine[]
}

model Node {
  id          String  @id @default(uuid())
  name        String
  currentRaid String
  nextRaid    String?
  cpuFlags    Json
  ram         Int
  cores       Int
  disks       Disk[]
}

model Disk {
  id     String @id @default(uuid())
  path   String
  nodeId String
  status String
  node   Node   @relation(fields: [nodeId], references: [id])
}

model ISO {
  id           String    @id @default(uuid())
  filename     String    @unique
  os           String
  version      String?
  size         BigInt
  uploadedAt   DateTime  @default(now())
  lastVerified DateTime?
  isAvailable  Boolean   @default(true)
  checksum     String?
  downloadUrl  String?
  path         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Machine {
  id                String                @id @default(uuid())
  name              String
  internalName      String
  status            String
  userId            String?
  templateId        String?
  os                String
  cpuCores          Int                   @default(0)
  ramGB             Int                   @default(0)
  diskSizeGB        Int                   @default(0)
  gpuPciAddress     String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  departmentId      String?
  firewallTemplates Json?
  applicationUsage  ApplicationUsage[]
  department        Department?           @relation(fields: [departmentId], references: [id])
  template          MachineTemplate?      @relation(fields: [templateId], references: [id])
  user              User?                 @relation(fields: [userId], references: [id])
  applications      MachineApplication[]
  configuration     MachineConfiguration?
  pendingCommands   PendingCommand[]
  portUsage         PortUsage[]
  processSnapshots  ProcessSnapshot[]
  systemMetrics     SystemMetrics[]
  nwFilters         VMNWFilter[]
  serviceConfigs    VMServiceConfig[]
  ports             VmPort[]
  windowsServices   WindowsService[]
}

model MachineConfiguration {
  id              String  @id @default(uuid())
  xml             Json?
  graphicProtocol String?
  graphicPort     Int?
  graphicPassword String?
  graphicHost     String?
  assignedGpuBus  String?
  machineId       String  @unique
  machine         Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
}

model MachineTemplate {
  id          String                   @id @default(uuid())
  name        String
  description String?
  cores       Int
  /// In GB
  ram         Int
  /// In GB
  storage     Int
  createdAt   DateTime                 @default(now())
  categoryId  String?
  machines    Machine[]
  category    MachineTemplateCategory? @relation(fields: [categoryId], references: [id])
}

model MachineTemplateCategory {
  id          String            @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  templates   MachineTemplate[]
}

model Application {
  id             String               @id @default(uuid())
  name           String
  description    String?
  version        String?
  url            String?
  icon           String?
  os             String[]
  installCommand Json
  parameters     Json
  createdAt      DateTime             @default(now())
  machines       MachineApplication[]
}

model MachineApplication {
  machineId     String
  applicationId String
  parameters    Json
  application   Application @relation(fields: [applicationId], references: [id])
  machine       Machine     @relation(fields: [machineId], references: [id])

  @@id([machineId, applicationId])
}

model PendingCommand {
  id         String   @id @default(uuid())
  machineId  String
  command    String
  parameters Json
  createdAt  DateTime @default(now())
  machine    Machine  @relation(fields: [machineId], references: [id])

  @@index([machineId])
}

model Notification {
  id      String  @id @default(uuid())
  message String?
}

model Department {
  id             String                    @id @default(uuid())
  name           String
  createdAt      DateTime                  @default(now())
  internetSpeed  Int?
  ipSubnet       String?
  configuration  DepartmentConfiguration?
  nwFilters      DepartmentNWFilter[]
  serviceConfigs DepartmentServiceConfig[]
  machines       Machine[]
}

model NWFilter {
  id           String               @id @default(uuid())
  name         String               @unique
  internalName String               @unique
  uuid         String               @unique
  description  String?
  chain        String?
  type         String               @default("generic")
  priority     Int                  @default(500)
  stateMatch   Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  flushedAt    DateTime?
  departments  DepartmentNWFilter[]
  rules        FWRule[]
  referencedBy FilterReference[]    @relation("ReferencingFilters")
  references   FilterReference[]    @relation("ReferencedFilters")
  vms          VMNWFilter[]
}

model FilterReference {
  id             String   @id @default(uuid())
  sourceFilterId String
  targetFilterId String
  createdAt      DateTime @default(now())
  sourceFilter   NWFilter @relation("ReferencingFilters", fields: [sourceFilterId], references: [id], onDelete: Cascade)
  targetFilter   NWFilter @relation("ReferencedFilters", fields: [targetFilterId], references: [id], onDelete: Cascade)

  @@unique([sourceFilterId, targetFilterId])
}

model DepartmentNWFilter {
  id           String     @id @default(uuid())
  departmentId String
  nwFilterId   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  nwFilter     NWFilter   @relation(fields: [nwFilterId], references: [id], onDelete: Cascade)

  @@unique([departmentId, nwFilterId])
}

model FWRule {
  id           String   @id @default(uuid())
  nwFilterId   String
  action       String   @default("accept")
  direction    String   @default("inout")
  priority     Int
  protocol     String   @default("all")
  ipVersion    String?
  srcMacAddr   String?
  srcIpAddr    String?
  srcIpMask    String?
  dstIpAddr    String?
  dstIpMask    String?
  srcPortStart Int?
  srcPortEnd   Int?
  dstPortStart Int?
  dstPortEnd   Int?
  state        Json?
  comment      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nwFilter     NWFilter @relation(fields: [nwFilterId], references: [id], onDelete: Cascade)
}

model DepartmentConfiguration {
  id           String     @id @default(uuid())
  departmentId String     @unique
  cleanTraffic Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model VMNWFilter {
  id         String   @id @default(uuid())
  vmId       String
  nwFilterId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  nwFilter   NWFilter @relation(fields: [nwFilterId], references: [id], onDelete: Cascade)
  vm         Machine  @relation(fields: [vmId], references: [id], onDelete: Cascade)

  @@unique([vmId, nwFilterId])
}

model VmPort {
  id        String   @id @default(uuid())
  portStart Int
  portEnd   Int
  protocol  String
  running   Boolean
  enabled   Boolean
  toEnable  Boolean
  vmId      String
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vm        Machine  @relation(fields: [vmId], references: [id])

  @@unique([vmId, portStart, protocol])
}

model DepartmentServiceConfig {
  id             String     @id @default(uuid())
  departmentId   String
  serviceId      String
  useEnabled     Boolean    @default(false)
  provideEnabled Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  department     Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([departmentId, serviceId])
}

model VMServiceConfig {
  id             String   @id @default(uuid())
  vmId           String
  serviceId      String
  useEnabled     Boolean  @default(false)
  provideEnabled Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  vm             Machine  @relation(fields: [vmId], references: [id], onDelete: Cascade)

  @@unique([vmId, serviceId])
}

model GlobalServiceConfig {
  id             String   @id @default(uuid())
  serviceId      String   @unique
  useEnabled     Boolean  @default(true)
  provideEnabled Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SystemMetrics {
  id                String   @id @default(uuid())
  machineId         String
  cpuUsagePercent   Float
  cpuCoresUsage     Json
  cpuTemperature    Float?
  totalMemoryKB     BigInt
  usedMemoryKB      BigInt
  availableMemoryKB BigInt
  swapTotalKB       BigInt?
  swapUsedKB        BigInt?
  diskUsageStats    Json
  diskIOStats       Json
  networkStats      Json
  uptime            BigInt
  loadAverage       Json?
  timestamp         DateTime @default(now())
  machine           Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, timestamp])
}

model ProcessSnapshot {
  id              String    @id @default(uuid())
  machineId       String
  processId       Int
  parentPid       Int?
  name            String
  executablePath  String?
  commandLine     String?
  cpuUsagePercent Float
  memoryUsageKB   BigInt
  diskReadBytes   BigInt?
  diskWriteBytes  BigInt?
  status          String
  startTime       DateTime?
  timestamp       DateTime  @default(now())
  machine         Machine   @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, timestamp])
  @@index([machineId, processId, timestamp])
}

model ApplicationUsage {
  id                String    @id @default(uuid())
  machineId         String
  executablePath    String
  applicationName   String
  version           String?
  description       String?
  publisher         String?
  lastAccessTime    DateTime?
  lastModifiedTime  DateTime?
  accessCount       Int       @default(0)
  totalUsageMinutes Int       @default(0)
  iconData          Bytes?
  iconFormat        String?
  fileSize          BigInt?
  firstSeen         DateTime  @default(now())
  lastSeen          DateTime  @default(now())
  isActive          Boolean   @default(true)
  machine           Machine   @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@unique([machineId, executablePath])
  @@index([machineId, lastAccessTime])
  @@index([machineId, isActive])
}

model PortUsage {
  id              String   @id @default(uuid())
  machineId       String
  port            Int
  protocol        String
  state           String
  processId       Int?
  processName     String?
  executablePath  String?
  isListening     Boolean  @default(false)
  connectionCount Int      @default(0)
  lastActivity    DateTime @default(now())
  timestamp       DateTime @default(now())
  machine         Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, port, protocol])
  @@index([machineId, timestamp])
  @@index([machineId, isListening])
}

model WindowsService {
  id               String                @id @default(uuid())
  machineId        String
  serviceName      String
  displayName      String
  description      String?
  startType        String
  serviceType      String
  executablePath   String?
  dependencies     Json?
  currentState     String
  processId        Int?
  lastStateChange  DateTime?
  stateChangeCount Int                   @default(0)
  isDefaultService Boolean               @default(false)
  usageScore       Float?                @default(0)
  firstSeen        DateTime              @default(now())
  lastSeen         DateTime              @default(now())
  stateHistory     ServiceStateHistory[]
  machine          Machine               @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@unique([machineId, serviceName])
  @@index([machineId, currentState])
  @@index([machineId, isDefaultService])
}

model ServiceStateHistory {
  id        String         @id @default(uuid())
  serviceId String
  fromState String?
  toState   String
  reason    String?
  timestamp DateTime       @default(now())
  service   WindowsService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId, timestamp])
}

model ErrorLog {
  id        String   @id @default(uuid())
  message   String
  stack     String?
  code      String
  severity  String   // LOW, MEDIUM, HIGH, CRITICAL
  context   Json?
  timestamp DateTime @default(now())
  resolved  Boolean  @default(false)
  
  @@index([timestamp])
  @@index([severity, timestamp])
  @@index([code, timestamp])
}

model PerformanceMetric {
  id        String   @id @default(uuid())
  name      String
  value     Float
  tags      Json?
  timestamp DateTime @default(now())
  
  @@index([name, timestamp])
  @@index([timestamp])
}

model PerformanceAggregate {
  id        String   @id @default(uuid())
  name      String
  period    String   // hourly, daily, weekly
  count     Int
  sum       Float
  min       Float
  max       Float
  avg       Float
  timestamp DateTime @default(now())
  
  @@index([name, period, timestamp])
  @@index([timestamp])
}

model HealthCheck {
  id           String   @id @default(uuid())
  service      String
  status       String   // healthy, degraded, unhealthy
  message      String?
  details      Json?
  responseTime Int?     // in milliseconds
  timestamp    DateTime @default(now())
  
  @@index([service, timestamp])
  @@index([status, timestamp])
  @@index([timestamp])
}

model BackgroundTaskLog {
  id         String    @id @default(uuid())
  taskId     String    @unique
  taskName   String
  status     String    // pending, running, completed, failed, cancelled
  startTime  DateTime
  endTime    DateTime?
  retryCount Int       @default(0)
  error      String?
  result     Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@index([status, createdAt])
  @@index([taskName, createdAt])
  @@index([createdAt])
}
