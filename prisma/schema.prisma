generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  deleted   Boolean
  token     String  @default("null")
  firstName String
  lastName  String
  userImage String? @unique
  role      String
  createdAt DateTime @default(now())
  VM Machine[]
}

model Node {
  id              String @id @default(uuid())
  name            String
  currentRaid     String
  nextRaid        String?
  cpuFlags        Json
  ram             Int
  cores           Int
  disks           Disk[]
}

model Disk {
  id              String @id @default(uuid())
  path            String
  nodeId          String
  node            Node @relation(fields: [nodeId], references: [id])
  status          String
}

model Machine {
  id                 String  @id @default(uuid())
  name               String
  internalName       String
  status             String
  userId             String?
  templateId         String
  os                 String
  createdAt          DateTime @default(now())
  template           MachineTemplate @relation(fields: [templateId], references: [id])
  user               User?           @relation(fields: [userId], references: [id])
  applications       MachineApplication[]
  configuration      MachineConfiguration?
  departmentId       String?
  department         Department?     @relation(fields: [departmentId], references: [id])
  pendingCommands    PendingCommand[]
  ports              VmPort[]
  nwFilters          VMNWFilter[]
}

model MachineConfiguration {
  id          String  @id @default(uuid())
  xml         Json?
  graphicProtocol String?
  graphicPort     Int?
  graphicPassword String?
  graphicHost     String?
  machineId   String  @unique
  machine     Machine @relation(fields: [machineId], references: [id])
}

model MachineTemplate {
  id            String @id @default(uuid())
  name          String
  description   String?
  cores         Int
  /// In GB
  ram           Int
  /// In GB
  storage       Int
  createdAt     DateTime @default(now())
  machines      Machine[]
  categoryId    String?
  category      MachineTemplateCategory? @relation(fields: [categoryId], references: [id])
}

model MachineTemplateCategory {
  id          String @id @default(uuid())
  name        String
  description String?
  templates   MachineTemplate[]
  createdAt   DateTime @default(now())
}

model Application {
  id              String    @id @default(uuid())
  name            String
  description     String?
  version         String?
  url             String?
  icon            String?
  os              String[]
  installCommand  Json
  parameters      Json
  createdAt       DateTime  @default(now())
  machines        MachineApplication[]
}

model MachineApplication {
  machineId     String
  applicationId String
  machine       Machine     @relation(fields: [machineId], references: [id])
  application   Application @relation(fields: [applicationId], references: [id])
  parameters    Json

  @@id([machineId, applicationId])
}

model PendingCommand {
  id         String   @id @default(uuid())
  machineId  String
  command    String
  parameters Json
  createdAt  DateTime @default(now())
  machine    Machine  @relation(fields: [machineId], references: [id])

  @@index([machineId])
}

model Notification {
  id      String          @id @default(uuid())
  message String?
}

model Department {
  id            String   @id @default(uuid())
  name          String
  createdAt     DateTime @default(now())
  internetSpeed Int?     // in Mbps
  ipSubnet      String?
  machines      Machine[]
  nwFilters     DepartmentNWFilter[]
  configuration DepartmentConfiguration?
}

model NWFilter {
  id            String   @id @default(uuid())
  name          String   @unique
  internalName  String   @unique
  uuid          String   @unique
  description   String?
  chain         String?  // ipv4, arp, etc.
  type          String   @default("generic") // generic, department, vm
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  rules         FWRule[]
  departments   DepartmentNWFilter[]
  vms          VMNWFilter[]
  
  // Self-referential many-to-many relationship for filter references
  referencedBy    FilterReference[] @relation("ReferencingFilters")
  references      FilterReference[] @relation("ReferencedFilters")
}

// Join table for filter references
model FilterReference {
  id              String   @id @default(uuid())
  sourceFilter    NWFilter @relation("ReferencingFilters", fields: [sourceFilterId], references: [id], onDelete: Cascade)
  sourceFilterId  String
  targetFilter    NWFilter @relation("ReferencedFilters", fields: [targetFilterId], references: [id], onDelete: Cascade)
  targetFilterId  String
  createdAt      DateTime @default(now())

  @@unique([sourceFilterId, targetFilterId])
}

model DepartmentNWFilter {
  id           String     @id @default(uuid())
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String
  nwFilter     NWFilter   @relation(fields: [nwFilterId], references: [id], onDelete: Cascade)
  nwFilterId   String
  priority     Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([departmentId, nwFilterId])
}

model FWRule {
  id          String    @id @default(uuid())
  nwFilter    NWFilter  @relation(fields: [nwFilterId], references: [id], onDelete: Cascade)
  nwFilterId  String
  action      String    @default("accept") // accept, reject, drop, return, continue
  direction   String    @default("inout")  // in, out, inout
  priority    Int
  protocol    String    @default("all")    // tcp, udp, icmp, arp, ipv4, ipv6, all
  ipVersion   String?   // ipv4, ipv6
  srcMacAddr  String?   // MAC address format
  srcIpAddr   String?   // IP address format
  srcIpMask   String?   // IP mask format
  dstIpAddr   String?   // IP address format
  dstIpMask   String?   // IP mask format
  srcPortStart Int?     @db.SmallInt // 0-65535
  srcPortEnd   Int?     @db.SmallInt // 0-65535
  dstPortStart Int?     @db.SmallInt // 0-65535
  dstPortEnd   Int?     @db.SmallInt // 0-65535
  state       Json?     // NEW, ESTABLISHED, RELATED, etc.
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([nwFilterId, priority])
}

model DepartmentConfiguration {
  id          String    @id @default(uuid())
  department  Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String   @unique
  cleanTraffic Boolean  @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model VMNWFilter {
  id           String     @id @default(uuid())
  vm           Machine    @relation(fields: [vmId], references: [id], onDelete: Cascade)
  vmId         String
  nwFilter     NWFilter   @relation(fields: [nwFilterId], references: [id], onDelete: Cascade)
  nwFilterId   String
  priority     Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([vmId, nwFilterId])
}

model VmPort {
  id          String    @id @default(uuid())
  portStart   Int       // Start of port range
  portEnd     Int       // End of port range (same as portStart for single port)
  protocol    String    // tcp or udp
  running     Boolean   // if the port is currently in use
  enabled     Boolean   // if firewall allows inbound connections
  toEnable    Boolean   // if it will be enabled in next firewall update
  vmId        String
  vm          Machine   @relation(fields: [vmId], references: [id])
  lastSeen    DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@unique([vmId, portStart, protocol])
}
