generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String
  deleted             Boolean
  token               String               @default("null")
  firstName           String
  lastName            String
  userImage           String?              @unique
  role                String
  createdAt           DateTime             @default(now())
  VM                  Machine[]
  maintenanceTasks    MaintenanceTask[]
  maintenanceHistory  MaintenanceHistory[]
}

model Node {
  id          String  @id @default(uuid())
  name        String
  currentRaid String
  nextRaid    String?
  cpuFlags    Json
  ram         Int
  cores       Int
  disks       Disk[]
}

model Disk {
  id     String @id @default(uuid())
  path   String
  nodeId String
  status String
  node   Node   @relation(fields: [nodeId], references: [id])
}

model ISO {
  id           String    @id @default(uuid())
  filename     String    @unique
  os           String
  version      String?
  size         BigInt
  uploadedAt   DateTime  @default(now())
  lastVerified DateTime?
  isAvailable  Boolean   @default(true)
  checksum     String?
  downloadUrl  String?
  path         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Machine {
  id                String                @id @default(uuid())
  name              String
  internalName      String
  status            String
  userId            String?
  templateId        String?
  os                String
  cpuCores          Int                   @default(0)
  ramGB             Int                   @default(0)
  diskSizeGB        Int                   @default(0)
  gpuPciAddress     String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  departmentId      String?
  firewallTemplates Json?
  localIP           String?               // VM local/private IP address
  publicIP          String?               // VM public IP address (if available)
  applicationUsage  ApplicationUsage[]
  department        Department?           @relation(fields: [departmentId], references: [id])
  template          MachineTemplate?      @relation(fields: [templateId], references: [id])
  user              User?                 @relation(fields: [userId], references: [id])
  applications      MachineApplication[]
  healthAlerts      VMHealthAlert[]
  healthConfig      VMHealthConfig?
  healthSnapshots   VMHealthSnapshot[]
  healthCheckQueue  VMHealthCheckQueue[]
  systemEvents      SystemEvent[]
  configuration     MachineConfiguration?
  pendingCommands   PendingCommand[]
  portUsage         PortUsage[]
  processSnapshots  ProcessSnapshot[]
  systemMetrics     SystemMetrics[]
  nwFilters         VMNWFilter[]
  serviceConfigs    VMServiceConfig[]
  ports             VmPort[]
  windowsServices   WindowsService[]
  maintenanceTasks  MaintenanceTask[]
  maintenanceHistory MaintenanceHistory[]
  recommendations   VMRecommendation[]
}

model MachineConfiguration {
  id              String  @id @default(uuid())
  xml             Json?
  graphicProtocol String?
  graphicPort     Int?
  graphicPassword String?
  graphicHost     String?
  assignedGpuBus  String?
  machineId       String  @unique
  machine         Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
}

model MachineTemplate {
  id          String                   @id @default(uuid())
  name        String
  description String?
  cores       Int
  /// In GB
  ram         Int
  /// In GB
  storage     Int
  createdAt   DateTime                 @default(now())
  categoryId  String?
  machines    Machine[]
  category    MachineTemplateCategory? @relation(fields: [categoryId], references: [id])
}

model MachineTemplateCategory {
  id          String            @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  templates   MachineTemplate[]
}

model Application {
  id             String               @id @default(uuid())
  name           String
  description    String?
  version        String?
  url            String?
  icon           String?
  os             String[]
  installCommand Json
  parameters     Json
  createdAt      DateTime             @default(now())
  machines       MachineApplication[]
}

model MachineApplication {
  machineId     String
  applicationId String
  parameters    Json
  application   Application @relation(fields: [applicationId], references: [id])
  machine       Machine     @relation(fields: [machineId], references: [id])

  @@id([machineId, applicationId])
}

model PendingCommand {
  id         String   @id @default(uuid())
  machineId  String
  command    String
  parameters Json
  createdAt  DateTime @default(now())
  machine    Machine  @relation(fields: [machineId], references: [id])

  @@index([machineId])
}

model Notification {
  id      String  @id @default(uuid())
  message String?
}

model Department {
  id             String                    @id @default(uuid())
  name           String
  createdAt      DateTime                  @default(now())
  internetSpeed  Int?
  ipSubnet       String?
  configuration  DepartmentConfiguration?
  nwFilters      DepartmentNWFilter[]
  serviceConfigs DepartmentServiceConfig[]
  machines       Machine[]
}

model NWFilter {
  id           String               @id @default(uuid())
  name         String               @unique
  internalName String               @unique
  uuid         String               @unique
  description  String?
  chain        String?
  type         String               @default("generic")
  priority     Int                  @default(500)
  stateMatch   Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  flushedAt    DateTime?
  departments  DepartmentNWFilter[]
  rules        FWRule[]
  referencedBy FilterReference[]    @relation("ReferencingFilters")
  references   FilterReference[]    @relation("ReferencedFilters")
  vms          VMNWFilter[]
}

model FilterReference {
  id             String   @id @default(uuid())
  sourceFilterId String
  targetFilterId String
  createdAt      DateTime @default(now())
  sourceFilter   NWFilter @relation("ReferencingFilters", fields: [sourceFilterId], references: [id], onDelete: Cascade)
  targetFilter   NWFilter @relation("ReferencedFilters", fields: [targetFilterId], references: [id], onDelete: Cascade)

  @@unique([sourceFilterId, targetFilterId])
}

model DepartmentNWFilter {
  id           String     @id @default(uuid())
  departmentId String
  nwFilterId   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  nwFilter     NWFilter   @relation(fields: [nwFilterId], references: [id], onDelete: Cascade)

  @@unique([departmentId, nwFilterId])
}

model FWRule {
  id           String   @id @default(uuid())
  nwFilterId   String
  action       String   @default("accept")
  direction    String   @default("inout")
  priority     Int
  protocol     String   @default("all")
  ipVersion    String?
  srcMacAddr   String?
  srcIpAddr    String?
  srcIpMask    String?
  dstIpAddr    String?
  dstIpMask    String?
  srcPortStart Int?
  srcPortEnd   Int?
  dstPortStart Int?
  dstPortEnd   Int?
  state        Json?
  comment      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nwFilter     NWFilter @relation(fields: [nwFilterId], references: [id], onDelete: Cascade)
}

model DepartmentConfiguration {
  id           String     @id @default(uuid())
  departmentId String     @unique
  cleanTraffic Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model VMNWFilter {
  id         String   @id @default(uuid())
  vmId       String
  nwFilterId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  nwFilter   NWFilter @relation(fields: [nwFilterId], references: [id], onDelete: Cascade)
  vm         Machine  @relation(fields: [vmId], references: [id], onDelete: Cascade)

  @@unique([vmId, nwFilterId])
}

model VmPort {
  id        String   @id @default(uuid())
  portStart Int
  portEnd   Int
  protocol  String
  running   Boolean
  enabled   Boolean
  toEnable  Boolean
  vmId      String
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vm        Machine  @relation(fields: [vmId], references: [id])

  @@unique([vmId, portStart, protocol])
}

model DepartmentServiceConfig {
  id             String     @id @default(uuid())
  departmentId   String
  serviceId      String
  useEnabled     Boolean    @default(false)
  provideEnabled Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  department     Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([departmentId, serviceId])
}

model VMServiceConfig {
  id             String   @id @default(uuid())
  vmId           String
  serviceId      String
  useEnabled     Boolean  @default(false)
  provideEnabled Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  vm             Machine  @relation(fields: [vmId], references: [id], onDelete: Cascade)

  @@unique([vmId, serviceId])
}

model GlobalServiceConfig {
  id             String   @id @default(uuid())
  serviceId      String   @unique
  useEnabled     Boolean  @default(true)
  provideEnabled Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SystemMetrics {
  id                String   @id @default(uuid())
  machineId         String
  cpuUsagePercent   Float
  cpuCoresUsage     Json
  cpuTemperature    Float?
  totalMemoryKB     BigInt
  usedMemoryKB      BigInt
  availableMemoryKB BigInt
  swapTotalKB       BigInt?
  swapUsedKB        BigInt?
  diskUsageStats    Json
  diskIOStats       Json
  networkStats      Json
  uptime            BigInt
  loadAverage       Json?
  timestamp         DateTime @default(now())
  machine           Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, timestamp])
}

model ProcessSnapshot {
  id              String    @id @default(uuid())
  machineId       String
  processId       Int
  parentPid       Int?
  name            String
  executablePath  String?
  commandLine     String?
  cpuUsagePercent Float
  memoryUsageKB   BigInt
  diskReadBytes   BigInt?
  diskWriteBytes  BigInt?
  status          String
  startTime       DateTime?
  timestamp       DateTime  @default(now())
  machine         Machine   @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, timestamp])
  @@index([machineId, processId, timestamp])
}

model ApplicationUsage {
  id                String    @id @default(uuid())
  machineId         String
  executablePath    String
  applicationName   String
  version           String?
  description       String?
  publisher         String?
  lastAccessTime    DateTime?
  lastModifiedTime  DateTime?
  accessCount       Int       @default(0)
  totalUsageMinutes Int       @default(0)
  iconData          Bytes?
  iconFormat        String?
  fileSize          BigInt?
  firstSeen         DateTime  @default(now())
  lastSeen          DateTime  @default(now())
  isActive          Boolean   @default(true)
  machine           Machine   @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@unique([machineId, executablePath])
  @@index([machineId, lastAccessTime])
  @@index([machineId, isActive])
}

model PortUsage {
  id              String   @id @default(uuid())
  machineId       String
  port            Int
  protocol        String
  state           String
  processId       Int?
  processName     String?
  executablePath  String?
  isListening     Boolean  @default(false)
  connectionCount Int      @default(0)
  lastActivity    DateTime @default(now())
  timestamp       DateTime @default(now())
  machine         Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, port, protocol])
  @@index([machineId, timestamp])
  @@index([machineId, isListening])
}

model WindowsService {
  id               String                @id @default(uuid())
  machineId        String
  serviceName      String
  displayName      String
  description      String?
  startType        String
  serviceType      String
  executablePath   String?
  dependencies     Json?
  currentState     String
  processId        Int?
  lastStateChange  DateTime?
  stateChangeCount Int                   @default(0)
  isDefaultService Boolean               @default(false)
  usageScore       Float?                @default(0)
  firstSeen        DateTime              @default(now())
  lastSeen         DateTime              @default(now())
  stateHistory     ServiceStateHistory[]
  machine          Machine               @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@unique([machineId, serviceName])
  @@index([machineId, currentState])
  @@index([machineId, isDefaultService])
}

model ServiceStateHistory {
  id        String         @id @default(uuid())
  serviceId String
  fromState String?
  toState   String
  reason    String?
  timestamp DateTime       @default(now())
  service   WindowsService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId, timestamp])
}

model ErrorLog {
  id        String   @id @default(uuid())
  message   String
  stack     String?
  code      String
  severity  String   // LOW, MEDIUM, HIGH, CRITICAL
  context   Json?
  timestamp DateTime @default(now())
  resolved  Boolean  @default(false)
  
  @@index([timestamp])
  @@index([severity, timestamp])
  @@index([code, timestamp])
}

model PerformanceMetric {
  id        String   @id @default(uuid())
  name      String
  value     Float
  tags      Json?
  timestamp DateTime @default(now())
  
  @@index([name, timestamp])
  @@index([timestamp])
}

model PerformanceAggregate {
  id        String   @id @default(uuid())
  name      String
  period    String   // hourly, daily, weekly
  count     Int
  sum       Float
  min       Float
  max       Float
  avg       Float
  timestamp DateTime @default(now())
  
  @@index([name, period, timestamp])
  @@index([timestamp])
}

model HealthCheck {
  id           String   @id @default(uuid())
  service      String
  status       String   // healthy, degraded, unhealthy
  message      String?
  details      Json?
  responseTime Int?     // in milliseconds
  timestamp    DateTime @default(now())
  
  @@index([service, timestamp])
  @@index([status, timestamp])
  @@index([timestamp])
}

model BackgroundTaskLog {
  id         String    @id @default(uuid())
  taskId     String    @unique
  taskName   String
  status     String    // pending, running, completed, failed, cancelled
  startTime  DateTime
  endTime    DateTime?
  retryCount Int       @default(0)
  error      String?
  result     Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@index([status, createdAt])
  @@index([taskName, createdAt])
  @@index([createdAt])
}

// VM Health Management Models
model VMHealthAlert {
  id            String   @id @default(uuid())
  machineId     String
  type          String   // AlertType enum value
  severity      String   // AlertSeverity enum value
  title         String
  description   String
  resolved      Boolean  @default(false)
  resolvedAt    DateTime?
  metadata      Json?    // Additional alert data
  remediation   Json?    // Remediation steps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  machine       Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)
  
  @@index([machineId, resolved])
  @@index([machineId, severity])
  @@index([createdAt])
}

model VMHealthConfig {
  id                     String   @id @default(uuid())
  machineId              String   @unique
  checkIntervalMinutes   Int      @default(5)
  metricsRetentionDays   Int      @default(7)
  thresholds             Json     // Threshold configuration
  enabledModules         String[] // List of enabled module IDs
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  machine                Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)
}

model KnownService {
  id            String   @id @default(uuid())
  name          String   @unique
  displayName   String
  description   String
  category      String   // gaming, database, web, development, etc.
  ports         Json     // Array of { port: number, protocol: string, direction: string }
  executable    String?  // Common executable names
  os            String[] // ['windows', 'linux', 'all']
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SystemEvent {
  id          String   @id @default(uuid())
  machineId   String
  eventType   String   // reboot, service_crash, login_failed, etc.
  severity    String   // critical, warning, info
  title       String
  description String
  metadata    Json?    // Additional event data
  timestamp   DateTime
  createdAt   DateTime @default(now())
  machine     Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)
  
  @@index([machineId, timestamp])
  @@index([machineId, eventType])
}

// Background VM Health Monitoring System Models

model VMHealthSnapshot {
  id                   String      @id @default(uuid())
  machineId            String
  snapshotDate         DateTime    @default(now())
  overallStatus        String      // Overall health status
  
  // Health Check Results (JSON for flexibility across different check types)
  diskSpaceInfo        Json?       // Disk space check results
  resourceOptInfo      Json?       // Resource optimization data
  windowsUpdateInfo    Json?       // Windows update status
  defenderStatus       Json?       // Windows Defender status
  applicationInventory Json?       // Application inventory data
  customCheckResults   Json?       // Custom health check results
  
  // Metadata and execution info
  osType               String?     // Windows/Linux
  checksCompleted      Int         @default(0)
  checksFailed         Int         @default(0)
  executionTimeMs      Int?        // Total execution time
  errorSummary         String?     // Summary of any errors
  
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  machine              Machine             @relation(fields: [machineId], references: [id], onDelete: Cascade)
  recommendations      VMRecommendation[]

  @@index([machineId, snapshotDate])
  @@index([snapshotDate])
  @@index([machineId, overallStatus])
}

model VMHealthCheckQueue {
  id           String          @id @default(uuid())
  machineId    String
  checkType    HealthCheckType
  priority     TaskPriority    @default(MEDIUM)
  status       TaskStatus      @default(PENDING)
  
  // Task execution details
  payload      Json?           // Parameters for the health check
  attempts     Int             @default(0)
  maxAttempts  Int             @default(3)
  
  // Scheduling information
  scheduledFor DateTime        @default(now())
  executedAt   DateTime?       // When execution started
  completedAt  DateTime?       // When execution finished
  
  // Results and error handling
  error        String?         // Error message if failed
  result       Json?           // Health check results
  executionTimeMs Int?         // How long the check took
  
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  machine      Machine         @relation(fields: [machineId], references: [id], onDelete: Cascade)
  
  @@index([machineId, status])
  @@index([status, priority, scheduledFor])
  @@index([scheduledFor, status])
  @@index([machineId, checkType, status])
}

// Enums for Background Health Monitoring System

enum HealthCheckType {
  OVERALL_STATUS
  DISK_SPACE
  RESOURCE_OPTIMIZATION
  WINDOWS_UPDATES
  WINDOWS_DEFENDER
  APPLICATION_INVENTORY
  APPLICATION_UPDATES
  SECURITY_CHECK
  PERFORMANCE_CHECK
  SYSTEM_HEALTH
  CUSTOM_CHECK
}

enum TaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  RETRY_SCHEDULED
}

enum TaskPriority {
  URGENT      // 1 - Critical security issues, failures
  HIGH        // 2 - Performance degradation, warnings
  MEDIUM      // 3 - Regular health checks (default)
  LOW         // 4 - Background maintenance
}

// Maintenance System Models

model MaintenanceTask {
  id              String                @id @default(uuid())
  machineId       String
  taskType        MaintenanceTaskType
  name            String
  description     String?
  isEnabled       Boolean               @default(true)
  isRecurring     Boolean               @default(false)
  cronSchedule    String?               // Cron pattern for recurring tasks
  runAt           DateTime?             // Specific run time for one-time tasks
  nextRunAt       DateTime?
  lastRunAt       DateTime?
  executionStatus String                @default("IDLE") // IDLE, RUNNING, LOCKED
  parameters      Json?                 // Task-specific parameters
  createdByUserId String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  machine         Machine               @relation(fields: [machineId], references: [id], onDelete: Cascade)
  createdBy       User                  @relation(fields: [createdByUserId], references: [id])
  history         MaintenanceHistory[]

  @@index([machineId, isEnabled])
  @@index([machineId, taskType])
  @@index([nextRunAt, isEnabled])
  @@index([taskType, isEnabled])
}

model MaintenanceHistory {
  id              String               @id @default(uuid())
  taskId          String?              // Null for immediate executions
  machineId       String
  taskType        MaintenanceTaskType
  status          MaintenanceStatus
  duration        Int?                 // Execution duration in milliseconds
  result          Json?                // Detailed results
  error           String?              // Error message if failed
  triggeredBy     MaintenanceTrigger
  executedByUserId String?
  executedAt      DateTime             @default(now())

  task            MaintenanceTask?     @relation(fields: [taskId], references: [id], onDelete: SetNull)
  machine         Machine              @relation(fields: [machineId], references: [id], onDelete: Cascade)
  executedBy      User?                @relation(fields: [executedByUserId], references: [id])

  @@index([machineId, executedAt])
  @@index([machineId, status])
  @@index([taskType, status])
  @@index([executedAt])
}

enum MaintenanceTaskType {
  DISK_CLEANUP
  DEFRAG
  WINDOWS_UPDATES
  DEFENDER_SCAN
  SYSTEM_FILE_CHECK
  DISK_CHECK
  REGISTRY_CLEANUP
  CUSTOM_SCRIPT
}

enum MaintenanceStatus {
  SUCCESS
  FAILED
  CANCELLED
  TIMEOUT
  RUNNING
}

enum MaintenanceTrigger {
  SCHEDULED
  MANUAL
}

enum RecommendationType {
  DISK_SPACE_LOW
  HIGH_CPU_APP
  HIGH_RAM_APP
  PORT_BLOCKED
  OVER_PROVISIONED
  UNDER_PROVISIONED
  OS_UPDATE_AVAILABLE
  APP_UPDATE_AVAILABLE
  DEFENDER_DISABLED
  DEFENDER_THREAT
  OTHER
}

model VMRecommendation {
  id          String             @id @default(uuid())
  machineId   String
  snapshotId  String?
  type        RecommendationType
  text        String
  actionText  String
  data        Json?
  createdAt   DateTime           @default(now())

  machine     Machine            @relation(fields: [machineId], references: [id], onDelete: Cascade)
  snapshot    VMHealthSnapshot?  @relation(fields: [snapshotId], references: [id], onDelete: SetNull)

  @@index([machineId, createdAt])
  @@index([machineId, snapshotId])
}
